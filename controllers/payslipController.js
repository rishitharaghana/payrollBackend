const pool = require('../config/db');
const util = require('util');
const PDFDocument = require('pdfkit');

const queryAsync = util.promisify(pool.query).bind(pool);
  
const validateInput = (employeeId, month) => {
  if (!/^\d+$/.test(employeeId)) {
    throw new Error('Invalid employee ID');
  }
  if (!/^\d{4}-\d{2}$/.test(month) && !/^[A-Za-z]+ \d{4}$/.test(month)) {
    throw new Error('Invalid month format. Use YYYY-MM or "Month YYYY"');
  }
  return true;
};
const formatCurrency = (value) => {
  return `â‚¹${(value || 0).toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
};
const generatePayslip = async (req, res) => {
  try {
    const { employeeId, month } = req.params;
    validateInput(employeeId, month);

    const query = `
      SELECT 
        p.employee_id, p.month, p.gross_salary, p.net_salary, p.pf_deduction, 
        p.esic_deduction, p.tax_deduction, p.status, p.payment_method, p.payment_date, 
        p.created_by, p.basic_salary, p.hra, p.da, p.other_allowances, p.professional_tax,
        e.employee_name, e.department, e.position, e.pan_number, e.uan_number, 
        e.bank_account_number, e.ifsc_code, c.company_name, c.company_pan, c.company_gstin
      FROM payroll p
      JOIN employees e ON p.employee_id = e.employee_id
      JOIN company c ON p.company_id = c.company_id
      WHERE p.employee_id = ? AND p.month = ?
    `;
    const rows = await queryAsync(query, [employeeId, month]);

    if (rows.length === 0) {
      return res.status(404).json({ error: 'No payslip found for the specified employee and month' });
    }

    const employee = rows[0];

    const doc = new PDFDocument({ margin: 50 });
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=payslip_${employee.employee_id}_${month}.pdf`);

    doc.pipe(res);

    doc.image('public/images/company_logo.png', 50, 30, { width: 100 }).moveDown(2);
    doc.fontSize(20).font('Helvetica-Bold').text('MNTechs Solutions Pvt Ltd', { align: 'center' });
    doc.fontSize(12).font('Helvetica').text('123 Business Street, City, Country', { align: 'center' });
    doc.text(`PAN: ${employee.company_pan} | GSTIN: ${employee.company_gstin}`, { align: 'center' });
    doc.moveDown(1).fontSize(16).text(`Payslip for ${month}`, { align: 'center' }).moveDown(1);

    doc.rect(40, 20, 520, 750).stroke();

    doc.fontSize(14).font('Helvetica-Bold').text('Employee Details', { underline: true });
    doc.fontSize(12).font('Helvetica');
    doc.text(`Name: ${employee.employee_name}`);
    doc.text(`Employee ID: ${employee.employee_id}`);
    doc.text(`Department: ${employee.department}`);
    doc.text(`Position: ${employee.position || '-'}`);
    doc.text(`PAN: ${employee.pan_number || '-'}`);
    doc.text(`UAN: ${employee.uan_number || '-'}`);
    doc.text(`Bank A/C: ${employee.bank_account_number || '-'}`);
    doc.text(`IFSC: ${employee.ifsc_code || '-'}`);
    doc.text(`Pay Period: ${month}`);
    doc.moveDown(1);

    doc.fontSize(14).font('Helvetica-Bold').text('Earnings', { underline: true });
    const earnings = [
      ['Basic Salary', formatCurrency(employee.basic_salary)],
      ['House Rent Allowance (HRA)', formatCurrency(employee.hra)],
      ['Dearness Allowance (DA)', formatCurrency(employee.da)],
      ['Other Allowances', formatCurrency(employee.other_allowances)],
      ['Gross Salary', formatCurrency(employee.gross_salary)],
    ];
    earnings.forEach((row, index) => {
      doc.fontSize(12).font(index === earnings.length - 1 ? 'Helvetica-Bold' : 'Helvetica')
        .text(`${row[0]}: ${row[1]}`, 50, doc.y + index * 20);
    });
    doc.moveDown(1);

    doc.fontSize(14).font('Helvetica-Bold').text('Deductions', { underline: true });
    const deductions = [
      ['Provident Fund (PF)', formatCurrency(employee.pf_deduction)],
      ['ESIC', formatCurrency(employee.esic_deduction)],
      ['Professional Tax', formatCurrency(employee.professional_tax)],
      ['Income Tax', formatCurrency(employee.tax_deduction)],
      ['Net Salary', formatCurrency(employee.net_salary)],
    ];
    deductions.forEach((row, index) => {
      doc.fontSize(12).font(index === deductions.length - 1 ? 'Helvetica-Bold' : 'Helvetica')
        .text(`${row[0]}: ${row[1]}`, 50, doc.y + index * 20);
    });
    doc.moveDown(1);

    doc.fontSize(12).font('Helvetica');
    doc.text(`Status: ${employee.status}`);
    doc.text(`Payment Method: ${employee.payment_method}`);
    doc.text(`Payment Date: ${new Date(employee.payment_date).toLocaleDateString('en-IN')}`);
    doc.text(`Generated By: ${employee.created_by}`);

    doc.moveDown(2);
    doc.fontSize(10).text(
      'This is a computer-generated payslip and does not require a signature. ' +
      'Complies with Payment of Wages Act, 1936, and other applicable laws.',
      { align: 'center' }
    );

    doc.end();
  } catch (error) {
    console.error(`Error generating payslip for employee ${employeeId}, month ${month}: ${error.message}`);
    res.status(error.message.includes('Invalid') ? 400 : 500).json({ message: 'Error generating payslip PDF' });
  }
};
const getPayslips = async (req, res) => {
  try {
    const query = `
      SELECT p.employee_id, p.month, e.employee_name as employee, e.department, e.position, p.net_salary as salary
      FROM payroll p
      JOIN employees e ON p.employee_id = e.employee_id
    `;
    const payslips = await queryAsync(query);
    res.json(payslips);
  } catch (error) {
    console.error(`Error fetching payslips: ${error.message}`);
    res.status(500).json({ message: 'Error fetching payslips' });
  }
};

module.exports = { generatePayslip, getPayslips };